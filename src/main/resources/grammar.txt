S ::= Program
Program ::= ExtDefList
ExtDefList ::= ExtDefList ExtDef | ε
ExtDef ::= Def | struct ID { O DefList } ; | function Type FunDec { O P DefList StmtList } | function Type FunDec ; 

BaseType ::= bool | char | int | float | double
Type ::= BaseType | struct ID

DefList ::= DefList Def | ε
Def ::= Type ID dims ; 

dims ::= ε | [ INTNUM ] dims
FunDec ::= ID ( VarList ) | ID ( )
VarList ::= VarList , ParamDec | ParamDec
ParamDec ::= Type ID dims

CompSt ::= { O DefList StmtList }
StmtList ::= StmtList M Stmt | ε

Stmt ::= Exp ; | ID = Exp ; | L = Exp ; | CompSt | if ( B ) M Stmt | if ( B ) M Stmt N else M Stmt | return Exp ; | while M ( B ) M Stmt | do M Stmt while ( M B ) ; | Q = Exp ;
L ::= ID [ Exp ] | L [ Exp ] 
Q ::= Exp . ID
Exp ::= Exp + Exp | Exp - Exp | Exp * Exp | Exp / Exp | ( Exp ) | ID | L | INTNUM | REALNUM | call ID ( ) | call ID ( ParamList ) | Q
ParamList ::= ParamList , Exp | Exp
B ::= B || M B | B && M B | ! B | ( B ) | Exp relop Exp | true | false 
relop ::= < | <= | == | != | > | >=

M ::= ε
N ::= ε
O ::= ε 
P ::= ε 